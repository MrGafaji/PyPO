/**
\page contribguide Instructions For Contributions & Development
This page contains an overview of instructions for people intending to develop `PyPO`.
These include the contributor guidelines, but also guidelines on how to document contributions and how to test `PyPO`.

\section contrib Contributor Guidelines
People wishing to contribute are more than welcome to do so. Contributions can be made by opening a pull request to the main repository from your own fork of `PyPO`.
This is the so-called [fork-and-branch workflow](https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/).
Create a fork from the [PyPO repository](https://github.com/PyPO-dev/PyPO) to your own profile, and clone:
```
git clone <URL-to-your-PyPO-fork>
```

Set the original repo as upstream:
```
git remote add upstream https://github.com/PyPO-dev/PyPO
```

It is good practice to make a feature branch in which you can store your work:
```
git checkout -b <new-branch-name>
```

Then, when it is time to push the changes to the original repo, run:
```
git push origin <new-branch-name>
```

This should prompt Github to ask you to open a pull request to the orignial repository.
Open the pull request, and the contribution will be reviewed. 
If it is accepted, the changes will be merged into the original main branch.
After the merge, do not forget to synchronise your remote/local copy:
```
git checkout main
git pull upstream main
git push origin main
```

Then, the feature branch can be deleted:
```
git branch -d <new-branch-name>
git push --delete origin <new-branch-name>
```

\section issues Issues, Feauture Requests & Bugs
Issues, feature requests and bugs can be reported in the `PyPO` [issue tracker](https://github.com/arend95/PyPO/issues).

\section devinstructions Instructions For Developers
As mentioned in the contributor guidelines, contributions to `PyPO` are more than welcome. 
This section contains information on utilities put in place to make it easier to develop, as well as certain rules and practices for making `PyPO` easy to maintain.

It is assumed that you have forked the PyPO repository to a root directory, which we will call PyPO-dev for now.

\subsection devinstall_page Dev Install
Installing `PyPO` for development is very similar to general installation:
Navigate to the cloned (and forked) PyPO repository and run:
```
pip install -e .
```

The "-e" flag tells pip to install `PyPO` in the actual "src/PyPO/" directory of the `PyPO` repository. 
This means that any changes to the Python source code are immediately reflected in the package imported through Python.
For the C/C++/CUDA code, this is not true. These scripts need to be compiled into libraries again (which happens when the `pip install -e .` command is run)
before the changes are reflected in the package.

PyPO can be uninstalled by running:
```
pip uninstall PyPO-pkg 
```

Note that this does not remove the compiled libraries in the "src/PyPO/" folder. If desired, these need to be removed manually.


\subsection gendoc Generating Documentation
`PyPO` documentation is generated using Doxygen and generated from comment blocks.
Because of this, there are several rules for developers regarding comments.
The C/C++/CUDA scripts use the so-called [Javadoc](https://en.wikipedia.org/wiki/Javadoc) style:
```
/**
 * Here comes a short description describing in keywords what the function does
 *
 * Followed by a longer description, placing the function's usage in a broader perspective perhaps.
 *
 * @param input Some input parameter of type inputObject.
 * @return output Some output parameter of type outputObject.
 *
 * @see inputObject
 * @see outputObject
 */
outputObject someFunc(inputObject input) {
    ...
    return output;
}
```

The Python scripts are not documented using docstrings, as Doxygen's special commands are not supported using docstrings.
Instead, we use another style, called the doxygen style:
```
##
# Here comes a short description describing in keywords what the function does
#
# Followed by a longer description, placing the function's usage in a broader perspective perhaps.
#
# @param input Some input parameter of type inputObject.
# @return output Some output parameter of type outputObject.
#
# @see inputObject
# @see outputObject
def someFunc(inputObject):
    ...
    return output
```

For an overview of the mentioned (and other) comment styles for doxygen, see [this link](https://www.doxygen.nl/manual/docblocks.html).

The documentation can be generated using the `GenerateDocs.py` script:
```
python GenerateDocs.py
```

This will generate the full `PyPO` user manual and place it in the "docs/" directory.

\subsection runtests Running The Automated Tests
`PyPO` contains an automated testing suite that can be run quite easily from the command line using nose2.
Note that, in order to run the unit tests, `PyPO` should be installed in \ref devinstall_page "development mode".

Navigate to the `PyPO` root directory and run:
```
nose2
```

This command will execute the entire testing suite.

Note that nose2 needs to be installed for this:
```
pip install nose2
```

Apart from running the test suite, it is also possible to generate a coverage report afterwards.
For this, coverage needs to be installed in addition to nose2:
```
pip install coverage
```

The coverage report can then be generated by running:
```
nose2 --with-coverage
```

and the coverage report will be displayed in the terminal after running the tests.

\subsection mantests Running The Manual Tests
In addition to automated unit tests, `PyPO` also contains a few manual tests.
These tests are designed to check the correctness of `PyPO` from the physics perspective and produce plots that can be inspected and checked.

To run a manual test, navigate to the "manual_tests" directory in the `PyPO` root directory and run:
```
python <name_of_manual_test>.py
```

Please note that some of these tests could take some time to calculate, especially if CUDA is not used.
As new manual tests are often added, there is no definite list of available tests.
Please have a look in the "manual_tests" folder for currently available tests.
*/
