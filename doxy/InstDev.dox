/**
\page contribguide Instructions For Contributions & Development
This page contains an overview of instructions for people intending to develop `PyPO`.
These include the contributor guidelines, but also guidelines on how to document contributions and how to test `PyPO`.

\section contrib Contributor Guidelines
People wishing to contribute are more than welcome to do so. Contributions can be made by opening a pull request to the main repository from your own fork of `PyPO`,
containing your contributions, the so-called [fork-and-branch workflow](https://blog.scottlowe.org/2015/01/27/using-fork-branch-git-workflow/).
Create a fork from the [PyPO repository](https://github.com/PyPO-dev/PyPO) to your own profile, and clone:
```
git clone <URL-to-your-PyPO-fork>
```

Set the original repo as upstream:
```
git remote add upstream https://github.com/PyPO-dev/PyPO
```

It is good practice to make a feature branch in which you can store your work:
```
git checkout -b <new-branch-name>
```

Then, when it is time to push the changes to the original repo, run:
```
git push origin <new-branch-name>
```

This should prompt Github to ask you to open a pull request to the orignial repository.
Open the pull request, and the contribution will be reviewed. 
If it is accepted, the changes will be merged into the original main branch.
After the merge, do not forget to synchronise your remote/local copy:
```
git checkout main
git pull upstream main
git oush origin main
```

Then, the feature branch can be deleted:
```
git branch -d <new-branch-name>
git push --delete origin <new-branch-name>
```

Issues, feature requests and bugs can be reported in the `PyPO` [issue tracker](https://github.com/arend95/PyPO/issues).

\section devinstructions Instructions For Developers
As mentioned in the contributor guidelines, contributions to `PyPO` are more than welcome. 
This section contains information on utilities put in place to make it easier to develop, as well as certain rules and practices for making `PyPO` easy to maintain.

It is assumed that you have forked the PyPO, PyPO-docs and PyPO-tutorials repositories to a root directory, which we will call PyPO-dev for now.
It is also assumed that each of these repositories has an upstream pointing to the original repos.

\subsection devinstall Dev Install
Installing `PyPO` for development is very similar to general installation:
Navigate to the cloned (and forked) PyPO repository and run:
```
pip install -e .
```

The "-e" flag tells pip to install `PyPO` in the actual "src/PyPO/" directory of the `PyPO` repository. 
This means that any changes to the Python source code are immediately reflected in the package imported through Python.
For the C/C++/CUDA code, this is not true. These scripts need to be compiled into libraries again (which happens when the `pip install -e .` command is run)
before the changes are reflected in the package.

PyPO can be uninstalled by running:
```
pip uninstall PyPO-pkg 
```

Note that this does not remove the compiled libraries in the "src/PyPO/" folder. If desired, these need to be removed manually.


\subsection gendoc Generating Documentation
`PyPO` documentation is generated using Doxygen and generated from comment blocks.
Because of this, there are several rules for developers regarding comments.
The C/C++/CUDA scripts use the so-called [Javadoc](https://en.wikipedia.org/wiki/Javadoc) style:
```
/**
 * Here comes a short description describing in keywords what the function does
 *
 * Followed by a longer description, placing the function's usage in a broader perspective perhaps.
 *
 * @param input Some input parameter of type inputObject.
 * @return output Some output parameter of type outputObject.
 *
 * @see inputObject
 * @see outputObject
 */
outputObject someFunc(inputObject input) {
    ...
    return output;
}
```

The Python scripts are not documented using docstrings, as Doxygen's special commands are not supported using docstrings.
Instead, we use another style, called the doxygen style:
```
##
# Here comes a short description describing in keywords what the function does
#
# Followed by a longer description, placing the function's usage in a broader perspective perhaps.
#
# @param input Some input parameter of type inputObject.
# @return output Some output parameter of type outputObject.
#
# @see inputObject
# @see outputObject
def someFunc(inputObject):
    ...
    return output
```

For an overview of the mentioned (and other) comment styles for doxygen, see [this link](https://www.doxygen.nl/manual/docblocks.html).

The documentation can be generated using the `DevUtils.py` script:
```
./DevUtils.py -d
```

This will generate the full `PyPO` user manual and place it in the "docs/" directory.

\subsection runtests Running The Tests
`PyPO` contains an automated testing suite that can be run quite easily from the command line:
```
./DevUtils.py -t
```

This command will execute the entire testing suite.
The testing suite contains unit tests, integration tests and system tests. The unit tests are concerned with atomic input/output relations.
The integration tests are concerned with testing bits of `PyPO` together, such as the rotations and translations for reflectors.
The system tests test `PyPO` by simulating physical systems and checking the correctness of the results.
*/
